package com.codewithsameer.blog.controllers;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.codewithsameer.blog.entities.User;
import com.codewithsameer.blog.payloads.ApiResponse;
import com.codewithsameer.blog.payloads.UserDto;
import com.codewithsameer.blog.services.UserServices;

import jakarta.validation.Valid;
@CrossOrigin
@RestController
@RequestMapping("/api/users")
public class UserController {

	@Autowired
	private UserServices userService;
	
	//POST- create user
	@PostMapping("/signup")
	public ResponseEntity<UserDto> createUser(@Valid@RequestBody UserDto userDto)
	{
		UserDto createUserDto = this.userService.createUser(userDto);
		return new ResponseEntity<>(createUserDto,HttpStatus.CREATED);
		
	}
	
	//for authentication without jwt
	@PostMapping("/login")
	public ResponseEntity<UserDto> signIn(@RequestBody UserDto userDto) {
		UserDto cc = this.userService.findByUsernamePassword(userDto.getName(), userDto.getPassword());
		System.out.println(cc.getName()+ " ::: "+ cc.getPassword());
		if(cc!=null)
		{
			return new ResponseEntity<User>(cc, HttpStatus.ACCEPTED);
		}
		else
		{
			return new ResponseEntity<User>(cc, HttpStatus.BAD_REQUEST);
		}
	}
	
	
	/*
@PostMapping("/Login")
	public ResponseEntity<ClassCoordinator> signIn(@RequestBody UserInfo user) {
		ClassCoordinator cc=this.service.getByUsernameAndPassword(user.getUsername(), user.getPassword());
		if(cc!=null) {
			return new ResponseEntity<ClassCoordinator>(cc, HttpStatus.ACCEPTED);
		}else {
			return new ResponseEntity<ClassCoordinator>(cc, HttpStatus.BAD_REQUEST);
		}
	}	  
	   */
	
	
	//PUT - update user
	@PutMapping("/{userId}")
	public ResponseEntity<UserDto> updatedUser(@Valid@RequestBody UserDto userDto,@PathVariable("userId") Integer uid)
	{
		UserDto updatedUser = this.userService.updateUser(userDto, uid);
		return ResponseEntity.ok(updatedUser);
		
	}
	//DELETE - delete user
	@DeleteMapping("/{userId}")
	public ResponseEntity<ApiResponse> deleteUser(@PathVariable("userId") Integer uid)
	{
	  this.userService.deleteUser(uid);
	  return new ResponseEntity<ApiResponse>(new ApiResponse("User deleted Succefully" , true), HttpStatus.OK);
	}
	
	 //GET - users get
		@GetMapping("/")
		public ResponseEntity<List<UserDto>> getAllUser(){
			return ResponseEntity.ok(this.userService.getAllUsers());
		}
	
    //GET - user get
	@GetMapping("/{userId}")
	public ResponseEntity<UserDto> getSingleUser(@PathVariable Integer userId){
		return ResponseEntity.ok(this.userService.getUserById(userId));
	}
	
	
}
